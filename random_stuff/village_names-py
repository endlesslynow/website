import tkinter as tk
from tkinter import scrolledtext
from tkinterdnd2 import DND_FILES, TkinterDnD
from bs4 import BeautifulSoup
import os

# --- Core Logic to Extract Village Names ---
def extract_village_names_from_html(file_path):
    """
    Parses an HTML file to extract village names from anchor tags.

    Args:
        file_path (str): The path to the HTML file.

    Returns:
        list: A list of strings, where each string is a village name.
              Returns an empty list if the file can't be parsed or no names are found.
    """
    village_names = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        # Find all anchor <a> tags that have an 'href' attribute starting with '#'
        # This is specific to the structure of the 'efrin.html' file provided.
        # We also exclude the "Clear Highlights" link by checking its id.
        links = soup.find_all('a', href=lambda href: href and href.startswith('#'))

        for link in links:
            if link.get('id') != 'clear-link':
                # The village name is the text content of the link
                name = link.get_text(strip=True)
                if name:
                    village_names.append(name)

    except FileNotFoundError:
        return ["Error: File not found."]
    except Exception as e:
        return [f"An error occurred: {e}"]

    return village_names


# --- GUI Application ---
class VillageExtractorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Village Name Extractor")
        self.root.geometry("400x500")
        self.root.config(bg="#f0f0f0")

        # --- Instructions Label ---
        self.label = tk.Label(
            root,
            text="Drop your HTML file below to extract village names",
            pady=20,
            bg="#f0f0f0",
            font=("Helvetica", 12)
        )
        self.label.pack(fill=tk.X, padx=10)

        # --- Text Area for Dropping and Displaying Results ---
        # Using ScrolledText for cases with many villages
        self.text_area = scrolledtext.ScrolledText(
            root,
            wrap=tk.WORD,
            font=("Helvetica", 11),
            bg="#ffffff",
            relief="solid",
            bd=1
        )
        self.text_area.pack(expand=True, fill="both", padx=10, pady=(0, 10))
        self.text_area.insert(tk.END, "Waiting for file...")
        self.text_area.config(state=tk.DISABLED) # Make it read-only initially

        # --- Drag and Drop Setup ---
        # The DND_FILES argument indicates that we're expecting files
        self.text_area.drop_target_register(DND_FILES)
        self.text_area.dnd_bind('<<Drop>>', self.on_drop)

    def on_drop(self, event):
        """
        Handles the file drop event.
        """
        # The event.data can sometimes be wrapped in curly braces {}
        file_path = event.data.strip('{}')

        # Check if the dropped item is a valid file
        if not os.path.isfile(file_path):
            self.update_text_area(["Error: Please drop a single, valid file."])
            return

        # Check if the file has an HTML extension
        if not file_path.lower().endswith(('.html', '.htm')):
             self.update_text_area(["Error: Please drop an HTML file (.html or .htm)."])
             return

        # Extract names and update the text area
        village_names = extract_village_names_from_html(file_path)
        if village_names:
            self.update_text_area(village_names)
        else:
            self.update_text_area(["No village names found in this file."])

    def update_text_area(self, lines):
        """
        Clears the text area and inserts new content.
        """
        self.text_area.config(state=tk.NORMAL) # Enable writing
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(tk.END, "\n".join(lines))
        self.text_area.config(state=tk.DISABLED) # Disable writing to make it read-only

# --- Main execution block ---
if __name__ == "__main__":
    # TkinterDnD.Tk() is used instead of tk.Tk() to enable drag-and-drop
    app_root = TkinterDnD.Tk()
    app = VillageExtractorApp(app_root)
    app_root.mainloop()
